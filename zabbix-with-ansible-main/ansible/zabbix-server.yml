---

### All the code up to the play for 'Installing Zabbix' is being done to create a postgres user in advance and add him to sudoers group.
### This is being done because it seems the postgres user is hardcoded as user with 'become' privileges in the zabbix_server role, see below:
### Check line 33 https://github.com/ansible-collections/community.zabbix/blob/f1f4b9db36554f825c4d4e26cd6101478d28411f/roles/zabbix_server/tasks/postgresql.yml
### However, the user doesn't seem to be created by the role itself, because this current playbook fails when executed with the error below
### "Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user (rc: 1, err: chown: invalid user: ‘postgres’\n}).

tasks:
    - name: Make sure we have a 'wheel' group
      hosts: all
      connection: ssh
      become: true
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      hosts: all
      connection: ssh
      become: true
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Add sudoers users to wheel group
      hosts: all
      connection: ssh
      become: true
      user:
        name=postgres
        groups=wheel
        append=yes
        state=present
        createhome=yes


- name: Installing Zabbix
  hosts: all
  connection: ssh
  become: true
  collections:
    - community.zabbix

  roles:
    - role: zabbix_server
    - role: geerlingguy.apache
    - role: wdijkerman.php
    - role: zabbix_web

  post_tasks:
    - name: Create user group
      connection: local
      become: false
      register: api_create_user_group
      until: api_create_user_group is succeeded
      community.zabbix.zabbix_usergroup:
        server_url: "{{ zabbix_url }}"
        login_user: "{{ zabbix_api_user }}"
        login_password: "{{ zabbix_api_pass }}"
        name: ops
        state: present

    - name: 'Create an email mediatype with message templates'
      become: false
      connection: local
      register: api_create_mediatype
      until: api_create_mediatype is succeeded
      community.zabbix.zabbix_mediatype:
        name: "A: Ops email"
        server_url: "{{ zabbix_url }}"
        login_user: "{{ zabbix_api_user }}"
        login_password: "{{ zabbix_api_pass }}"
        type: 'email'
        smtp_email: 'ops@example.com'
        smtp_server: 'mail.example.com'
        smtp_helo: 'example.com'
        message_templates:
          - eventsource: triggers
            recovery: operations
            subject: "Problem: {EVENT.NAME}"
            body: "Problem started at {EVENT.TIME} on {EVENT.DATE}\r\nProblem name: {EVENT.NAME}\r\n"
          - eventsource: triggers
            recovery: recovery_operations
            subject: "Resolved: {EVENT.NAME}"
            body: "Problem resolved at {EVENT.TIME} on {EVENT.DATE}\r\nProblem name: {EVENT.NAME}\r\n"
          - eventsource: triggers
            recovery: update_operations
            subject: "Updated problem: {EVENT.NAME}"
            body: "{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.\r\n"
          - eventsource: discovery
            recovery: operations
            subject: "Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}"
            body: "Discovery rule: {DISCOVERY.RULE.NAME}\r\n\r\nDevice IP: {DISCOVERY.DEVICE.IPADDRESS}"
          - eventsource: autoregistration
            recovery: operations
            subject: "Autoregistration: {HOST.HOST}"
            body: "Host name: {HOST.HOST}\r\nHost IP: {HOST.IP}\r\nAgent port: {HOST.PORT}"

    - name: Deploy trigger action
      connection: local
      become: false
      register: api_create_trigger
      until: api_create_trigger is succeeded
      community.zabbix.zabbix_action:
        server_url: "{{ zabbix_url }}"
        login_user: "{{ zabbix_api_user }}"
        login_password: "{{ zabbix_api_pass }}"
        name: "A: Send alerts to Admin"
        event_source: 'trigger'
        state: present
        status: enabled
        esc_period: "60"
        conditions:
          - type: 'trigger_severity'
            operator: '>='
            value: 'Information'
        operations:
          - type: send_message
            subject: "Something bad is happening"
            message: "Come on, guys do something"
            media_type: 'Email'
            send_to_groups:
              - 'ops'

    - name: create of zabbix user.
      connection: local
      become: false
      register: api_create_user
      until: api_create_user is succeeded
      community.zabbix.zabbix_user:
        server_url: "{{ zabbix_url }}"
        login_user: "{{ zabbix_api_user }}"
        login_password: "{{ zabbix_api_pass }}"
        alias: aldar
        name: aldar
        surname: aldar
        usrgrps:
          - ops
          - Zabbix administrators
        passwd: password
        lang: en_GB
        theme: blue-theme
        autologin: no
        autologout: '0'
        refresh: '30'
        rows_per_page: '200'
        after_login_url: ''
        user_medias:
          - mediatype: Email
            sendto: tairun@bk.ru
            period: 1-7,00:00-24:00
            severity:
              not_classified: no
              information: yes
              warning: yes
              average: yes
              high: yes
              disaster: yes
            active: no
        type: Zabbix super admin
        state: present

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
